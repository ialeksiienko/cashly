package handlers

import (
	"fmt"
	"main-service/internal/sessions"
	"strconv"

	tb "gopkg.in/telebot.v3"
)

func (h *Handler) GetMembers(c tb.Context) error {
	userID := c.Sender().ID

	us, exists := sessions.GetUserState(userID)
	if !exists {
		return c.Send("–í–∏ –Ω–µ —É–≤—ñ–π—à–ª–∏ –≤ —Å—ñ–º'—é. –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ —Å—ñ–º'—é.")
	}

	members, err := h.usecases.UserService.GetMembersInfo(us.Family, userID)
	if err != nil {
		return c.Send("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Å—ñ–º'—ó.")
	}

	membersLen := len(members)

	if membersLen == 0 {
		return c.Send("–£ –≤–∞—à—ñ–π —Å—ñ–º'—ó –ø–æ–∫–∏ –Ω–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤.")
	}

	c.Send("üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Å—ñ–º'—ó:\n")

	for _, member := range members {
		role := "–£—á–∞—Å–Ω–∏–∫"
		if member.IsAdmin {
			role = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
		}

		userLabel := ""
		if member.IsCurrent {
			userLabel = " (—Ü–µ –≤–∏)"
		}

		text := fmt.Sprintf(
			"üë§ %s @%s %s\n- –†–æ–ª—å: %s\n- ID: %d",
			member.Firstname,
			member.Username,
			userLabel,
			role,
			member.ID,
		)

		if !member.IsCurrent && member.IsAdmin {
			btn := tb.InlineButton{
				Unique: "delete_member",
				Text:   "üóë –í–∏–¥–∞–ª–∏—Ç–∏",
				Data:   strconv.FormatInt(member.ID, 10),
			}

			markup := &tb.ReplyMarkup{}
			markup.InlineKeyboard = [][]tb.InlineButton{
				{btn},
			}

			c.Send(text, markup)
		} else {
			c.Send(text)
		}
	}

	return c.Send(fmt.Sprintf("–í—Å—å–æ–≥–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤: %d", membersLen))
}

func (h *Handler) LeaveFamily(c tb.Context) error {
	userID := c.Sender().ID

	us, exists := sessions.GetUserState(userID)
	if !exists {
		return c.Send("–í–∏ –Ω–µ —É–≤—ñ–π—à–ª–∏ –≤ —Å—ñ–º'—é. –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ —Å—ñ–º'—é.")
	}

	if us.Family.CreatedBy == userID {
		return c.Send("–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ –≤–∏–π—Ç–∏ –∑ —Å—ñ–º'—ó.")
	}

	err := h.usecases.UserService.LeaveFamily(us.Family.ID, userID)
	if err != nil {
		return c.Send("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–π—Ç–∏ –∑ —Å—ñ–º'—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
	}

	sessions.DeleteUserState(userID)

	msg, _ := h.bot.Send(c.Sender(), ".", &tb.SendOptions{
		ReplyMarkup: &tb.ReplyMarkup{
			RemoveKeyboard: true,
		},
	})

	h.bot.Delete(msg)

	inlineKeys := [][]tb.InlineButton{
		{BtnCreateFamily}, {BtnJoinFamily}, {BtnEnterMyFamily},
	}

	return c.Send(
		"–í–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–π—à–ª–∏ –∑ —Å—ñ–º'—ó.\n\n–í–∏–±–µ—Ä–∏ –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ.",
		&tb.ReplyMarkup{
			InlineKeyboard: inlineKeys,
		},
	)
}

// admin handlers

func (h *Handler) DeleteMember(c tb.Context) error {
	userID := c.Sender().ID
	data := c.Callback().Data

	memberID, err := strconv.ParseInt(data, 10, 64)
	if err != nil {
		return c.Send("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID.")
	}

	us, exists := sessions.GetUserState(userID)
	if !exists || us.Family == nil {
		return c.Send("–í–∏ –Ω–µ —É–≤—ñ–π—à–ª–∏ –≤ —Å—ñ–º'—é. –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ —Å—ñ–º'—é.")
	}

	if userID != us.Family.CreatedBy {
		return c.Send("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
	}

	if userID == memberID {
		return c.Send("–í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å–µ–±–µ.")
	}

	removeErr := h.usecases.AdminService.RemoveMember(us.Family.ID, memberID)
	if removeErr != nil {
		return c.Send("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Å—ñ–º'—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
	}

	h.bot.Edit(c.Message(), "–£—á–∞—Å–Ω–∏–∫–∞ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ. –û–Ω–æ–≤–ª—é—é —Å–ø–∏—Å–æ–∫...")

	return h.GetMembers(c)
}

func (h *Handler) DeleteFamily(c tb.Context) error {
	userID := c.Sender().ID

	us, exists := sessions.GetUserState(userID)
	if !exists || us.Family == nil {
		return c.Send("–í–∏ –Ω–µ —É–≤—ñ–π—à–ª–∏ –≤ —Å—ñ–º'—é. –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ —Å—ñ–º'—é.")
	}

	if userID != us.Family.CreatedBy {
		return c.Send("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Å—ñ–º'—ó.")
	}

	err := h.usecases.AdminService.DeleteFamily(us.Family.ID)
	if err != nil {
		return c.Send("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—ñ–º'—é. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
	}

	sessions.DeleteUserState(userID)

	msg, _ := h.bot.Send(c.Sender(), ".", &tb.SendOptions{
		ReplyMarkup: &tb.ReplyMarkup{
			RemoveKeyboard: true,
		},
	})

	h.bot.Delete(msg)

	inlineKeys := [][]tb.InlineButton{
		{BtnCreateFamily}, {BtnJoinFamily}, {BtnEnterMyFamily},
	}

	return c.Send(
		"–°—ñ–º'—é —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.\n\n–í–∏–±–µ—Ä–∏ –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤ –Ω–∞ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—ñ.",
		&tb.ReplyMarkup{
			InlineKeyboard: inlineKeys,
		},
	)
}

func (h *Handler) CreateNewInviteCode(c tb.Context) error {
	userID := c.Sender().ID

	us, exists := sessions.GetUserState(userID)
	if !exists || us.Family == nil {
		return c.Send("–í–∏ –Ω–µ —É–≤—ñ–π—à–ª–∏ –≤ —Å—ñ–º'—é. –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ —Å—ñ–º'—é.")
	}

	if userID != us.Family.CreatedBy {
		return c.Send("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫–æ–¥—É –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è.")
	}

	code, expiresAt, err := h.usecases.AdminService.CreateNewFamilyCode(us.Family.ID, userID)
	if err != nil {
		return c.Send("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.")
	}

	return c.Send(fmt.Sprintf("–ù–æ–≤–∏–π –∫–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è: `%s`\n\n–î—ñ–π—Å–Ω–∏–π –¥–æ ‚Äî %s", code, expiresAt.Format("02.01.2006 15:04")), &tb.SendOptions{
		ParseMode: tb.ModeMarkdown,
	})
}
