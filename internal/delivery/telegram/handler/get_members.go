package handler

import (
	"context"
	"errors"
	"fmt"
	"monofamily/internal/errorsx"
	"monofamily/internal/session"
	"strconv"

	tb "gopkg.in/telebot.v3"
)

func (h *Handler) GetMembers(c tb.Context) error {
	userID := c.Sender().ID
	ctx := context.Background()

	us, exists := session.GetUserState(userID)
	if !exists || us.Family == nil {
		h.bot.Send(c.Sender(), "–í–∏ –Ω–µ —É–≤—ñ–π—à–ª–∏ –≤ —Å—ñ–º'—é. –°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ —É–≤—ñ–π—Ç–∏ –≤ —Å—ñ–º'—é.")
		return h.GoHome(c)
	}

	members, err := h.usecase.GetFamilyMembersInfo(ctx, us.Family, userID)
	if err != nil {
		var custErr *errorsx.CustomError[struct{}]
		if errors.As(err, &custErr) {
			if custErr.Code == errorsx.ErrCodeFamilyHasNoMembers {
				return c.Send("–£ –≤–∞—à—ñ–π —Å—ñ–º'—ó –ø–æ–∫–∏ –Ω–µ–º–∞—î —É—á–∞—Å–Ω–∏–∫—ñ–≤.")
			}
		}
		return c.Send("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Å—ñ–º'—ó.")
	}

	c.Send("üìã –°–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Å—ñ–º'—ó:\n")

	for _, member := range members {
		role := "–£—á–∞—Å–Ω–∏–∫"
		if member.IsAdmin {
			role = "–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä"
		}

		userLabel := ""
		if member.IsCurrent {
			userLabel = " (—Ü–µ –≤–∏)"
		}

		text := fmt.Sprintf(
			"üë§ %s @%s %s\n- –†–æ–ª—å: %s\n- ID: %d",
			member.Firstname,
			member.Username,
			userLabel,
			role,
			member.ID,
		)

		isAdmin := userID == us.Family.CreatedBy

		if !member.IsCurrent && isAdmin {
			btn := tb.InlineButton{
				Unique: "delete_member",
				Text:   "üóë –í–∏–¥–∞–ª–∏—Ç–∏",
				Data:   strconv.FormatInt(member.ID, 10),
			}

			markup := &tb.ReplyMarkup{}
			markup.InlineKeyboard = [][]tb.InlineButton{
				{btn},
			}

			c.Send(text, markup)
		} else {
			c.Send(text)
		}
	}

	return c.Send(fmt.Sprintf("–í—Å—å–æ–≥–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤: %d", len(members)))
}
