// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewFamilyInviteCodeProviderMock creates a new instance of FamilyInviteCodeProviderMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFamilyInviteCodeProviderMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FamilyInviteCodeProviderMock {
	mock := &FamilyInviteCodeProviderMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FamilyInviteCodeProviderMock is an autogenerated mock type for the FamilyInviteCodeProvider type
type FamilyInviteCodeProviderMock struct {
	mock.Mock
}

type FamilyInviteCodeProviderMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FamilyInviteCodeProviderMock) EXPECT() *FamilyInviteCodeProviderMock_Expecter {
	return &FamilyInviteCodeProviderMock_Expecter{mock: &_m.Mock}
}

// GetInviteCode provides a mock function for the type FamilyInviteCodeProviderMock
func (_mock *FamilyInviteCodeProviderMock) GetInviteCode(ctx context.Context, familyID int) (string, time.Time, error) {
	ret := _mock.Called(ctx, familyID)

	if len(ret) == 0 {
		panic("no return value specified for GetInviteCode")
	}

	var r0 string
	var r1 time.Time
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (string, time.Time, error)); ok {
		return returnFunc(ctx, familyID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) string); ok {
		r0 = returnFunc(ctx, familyID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) time.Time); ok {
		r1 = returnFunc(ctx, familyID)
	} else {
		r1 = ret.Get(1).(time.Time)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = returnFunc(ctx, familyID)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// FamilyInviteCodeProviderMock_GetInviteCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInviteCode'
type FamilyInviteCodeProviderMock_GetInviteCode_Call struct {
	*mock.Call
}

// GetInviteCode is a helper method to define mock.On call
//   - ctx context.Context
//   - familyID int
func (_e *FamilyInviteCodeProviderMock_Expecter) GetInviteCode(ctx interface{}, familyID interface{}) *FamilyInviteCodeProviderMock_GetInviteCode_Call {
	return &FamilyInviteCodeProviderMock_GetInviteCode_Call{Call: _e.mock.On("GetInviteCode", ctx, familyID)}
}

func (_c *FamilyInviteCodeProviderMock_GetInviteCode_Call) Run(run func(ctx context.Context, familyID int)) *FamilyInviteCodeProviderMock_GetInviteCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FamilyInviteCodeProviderMock_GetInviteCode_Call) Return(s string, time1 time.Time, err error) *FamilyInviteCodeProviderMock_GetInviteCode_Call {
	_c.Call.Return(s, time1, err)
	return _c
}

func (_c *FamilyInviteCodeProviderMock_GetInviteCode_Call) RunAndReturn(run func(ctx context.Context, familyID int) (string, time.Time, error)) *FamilyInviteCodeProviderMock_GetInviteCode_Call {
	_c.Call.Return(run)
	return _c
}
