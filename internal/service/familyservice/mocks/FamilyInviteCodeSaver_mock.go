// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewFamilyInviteCodeSaverMock creates a new instance of FamilyInviteCodeSaverMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFamilyInviteCodeSaverMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FamilyInviteCodeSaverMock {
	mock := &FamilyInviteCodeSaverMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FamilyInviteCodeSaverMock is an autogenerated mock type for the FamilyInviteCodeSaver type
type FamilyInviteCodeSaverMock struct {
	mock.Mock
}

type FamilyInviteCodeSaverMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FamilyInviteCodeSaverMock) EXPECT() *FamilyInviteCodeSaverMock_Expecter {
	return &FamilyInviteCodeSaverMock_Expecter{mock: &_m.Mock}
}

// SaveFamilyInviteCode provides a mock function for the type FamilyInviteCodeSaverMock
func (_mock *FamilyInviteCodeSaverMock) SaveFamilyInviteCode(ctx context.Context, userId int64, familyId int, code string) (time.Time, error) {
	ret := _mock.Called(ctx, userId, familyId, code)

	if len(ret) == 0 {
		panic("no return value specified for SaveFamilyInviteCode")
	}

	var r0 time.Time
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int, string) (time.Time, error)); ok {
		return returnFunc(ctx, userId, familyId, code)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int, string) time.Time); ok {
		r0 = returnFunc(ctx, userId, familyId, code)
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, int, string) error); ok {
		r1 = returnFunc(ctx, userId, familyId, code)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FamilyInviteCodeSaverMock_SaveFamilyInviteCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveFamilyInviteCode'
type FamilyInviteCodeSaverMock_SaveFamilyInviteCode_Call struct {
	*mock.Call
}

// SaveFamilyInviteCode is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - familyId int
//   - code string
func (_e *FamilyInviteCodeSaverMock_Expecter) SaveFamilyInviteCode(ctx interface{}, userId interface{}, familyId interface{}, code interface{}) *FamilyInviteCodeSaverMock_SaveFamilyInviteCode_Call {
	return &FamilyInviteCodeSaverMock_SaveFamilyInviteCode_Call{Call: _e.mock.On("SaveFamilyInviteCode", ctx, userId, familyId, code)}
}

func (_c *FamilyInviteCodeSaverMock_SaveFamilyInviteCode_Call) Run(run func(ctx context.Context, userId int64, familyId int, code string)) *FamilyInviteCodeSaverMock_SaveFamilyInviteCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *FamilyInviteCodeSaverMock_SaveFamilyInviteCode_Call) Return(time1 time.Time, err error) *FamilyInviteCodeSaverMock_SaveFamilyInviteCode_Call {
	_c.Call.Return(time1, err)
	return _c
}

func (_c *FamilyInviteCodeSaverMock_SaveFamilyInviteCode_Call) RunAndReturn(run func(ctx context.Context, userId int64, familyId int, code string) (time.Time, error)) *FamilyInviteCodeSaverMock_SaveFamilyInviteCode_Call {
	_c.Call.Return(run)
	return _c
}
