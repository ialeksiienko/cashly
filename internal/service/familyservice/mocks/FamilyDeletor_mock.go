// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/jackc/pgx/v4"
	mock "github.com/stretchr/testify/mock"
)

// NewFamilyDeletorMock creates a new instance of FamilyDeletorMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFamilyDeletorMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FamilyDeletorMock {
	mock := &FamilyDeletorMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FamilyDeletorMock is an autogenerated mock type for the FamilyDeletor type
type FamilyDeletorMock struct {
	mock.Mock
}

type FamilyDeletorMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FamilyDeletorMock) EXPECT() *FamilyDeletorMock_Expecter {
	return &FamilyDeletorMock_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function for the type FamilyDeletorMock
func (_mock *FamilyDeletorMock) Delete(ctx context.Context, fn pgx.Tx, familyID int) error {
	ret := _mock.Called(ctx, fn, familyID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Tx, int) error); ok {
		r0 = returnFunc(ctx, fn, familyID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FamilyDeletorMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type FamilyDeletorMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - fn pgx.Tx
//   - familyID int
func (_e *FamilyDeletorMock_Expecter) Delete(ctx interface{}, fn interface{}, familyID interface{}) *FamilyDeletorMock_Delete_Call {
	return &FamilyDeletorMock_Delete_Call{Call: _e.mock.On("Delete", ctx, fn, familyID)}
}

func (_c *FamilyDeletorMock_Delete_Call) Run(run func(ctx context.Context, fn pgx.Tx, familyID int)) *FamilyDeletorMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pgx.Tx
		if args[1] != nil {
			arg1 = args[1].(pgx.Tx)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *FamilyDeletorMock_Delete_Call) Return(err error) *FamilyDeletorMock_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FamilyDeletorMock_Delete_Call) RunAndReturn(run func(ctx context.Context, fn pgx.Tx, familyID int) error) *FamilyDeletorMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}
