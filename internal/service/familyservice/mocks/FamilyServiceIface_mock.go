// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"cashly/internal/entity"
	"context"
	"time"

	"github.com/jackc/pgx/v4"
	mock "github.com/stretchr/testify/mock"
)

// NewFamilyServiceIfaceMock creates a new instance of FamilyServiceIfaceMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFamilyServiceIfaceMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FamilyServiceIfaceMock {
	mock := &FamilyServiceIfaceMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FamilyServiceIfaceMock is an autogenerated mock type for the FamilyServiceIface type
type FamilyServiceIfaceMock struct {
	mock.Mock
}

type FamilyServiceIfaceMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FamilyServiceIfaceMock) EXPECT() *FamilyServiceIfaceMock_Expecter {
	return &FamilyServiceIfaceMock_Expecter{mock: &_m.Mock}
}

// ClearInviteCodes provides a mock function for the type FamilyServiceIfaceMock
func (_mock *FamilyServiceIfaceMock) ClearInviteCodes(ctx context.Context) error {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ClearInviteCodes")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = returnFunc(ctx)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FamilyServiceIfaceMock_ClearInviteCodes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClearInviteCodes'
type FamilyServiceIfaceMock_ClearInviteCodes_Call struct {
	*mock.Call
}

// ClearInviteCodes is a helper method to define mock.On call
//   - ctx context.Context
func (_e *FamilyServiceIfaceMock_Expecter) ClearInviteCodes(ctx interface{}) *FamilyServiceIfaceMock_ClearInviteCodes_Call {
	return &FamilyServiceIfaceMock_ClearInviteCodes_Call{Call: _e.mock.On("ClearInviteCodes", ctx)}
}

func (_c *FamilyServiceIfaceMock_ClearInviteCodes_Call) Run(run func(ctx context.Context)) *FamilyServiceIfaceMock_ClearInviteCodes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *FamilyServiceIfaceMock_ClearInviteCodes_Call) Return(err error) *FamilyServiceIfaceMock_ClearInviteCodes_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FamilyServiceIfaceMock_ClearInviteCodes_Call) RunAndReturn(run func(ctx context.Context) error) *FamilyServiceIfaceMock_ClearInviteCodes_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function for the type FamilyServiceIfaceMock
func (_mock *FamilyServiceIfaceMock) Create(ctx context.Context, inp *entity.Family) (*entity.Family, error) {
	ret := _mock.Called(ctx, inp)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Family
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Family) (*entity.Family, error)); ok {
		return returnFunc(ctx, inp)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Family) *entity.Family); ok {
		r0 = returnFunc(ctx, inp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Family)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entity.Family) error); ok {
		r1 = returnFunc(ctx, inp)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FamilyServiceIfaceMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type FamilyServiceIfaceMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - inp *entity.Family
func (_e *FamilyServiceIfaceMock_Expecter) Create(ctx interface{}, inp interface{}) *FamilyServiceIfaceMock_Create_Call {
	return &FamilyServiceIfaceMock_Create_Call{Call: _e.mock.On("Create", ctx, inp)}
}

func (_c *FamilyServiceIfaceMock_Create_Call) Run(run func(ctx context.Context, inp *entity.Family)) *FamilyServiceIfaceMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *entity.Family
		if args[1] != nil {
			arg1 = args[1].(*entity.Family)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FamilyServiceIfaceMock_Create_Call) Return(family *entity.Family, err error) *FamilyServiceIfaceMock_Create_Call {
	_c.Call.Return(family, err)
	return _c
}

func (_c *FamilyServiceIfaceMock_Create_Call) RunAndReturn(run func(ctx context.Context, inp *entity.Family) (*entity.Family, error)) *FamilyServiceIfaceMock_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function for the type FamilyServiceIfaceMock
func (_mock *FamilyServiceIfaceMock) Delete(ctx context.Context, fn pgx.Tx, familyID int) error {
	ret := _mock.Called(ctx, fn, familyID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, pgx.Tx, int) error); ok {
		r0 = returnFunc(ctx, fn, familyID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FamilyServiceIfaceMock_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type FamilyServiceIfaceMock_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - fn pgx.Tx
//   - familyID int
func (_e *FamilyServiceIfaceMock_Expecter) Delete(ctx interface{}, fn interface{}, familyID interface{}) *FamilyServiceIfaceMock_Delete_Call {
	return &FamilyServiceIfaceMock_Delete_Call{Call: _e.mock.On("Delete", ctx, fn, familyID)}
}

func (_c *FamilyServiceIfaceMock_Delete_Call) Run(run func(ctx context.Context, fn pgx.Tx, familyID int)) *FamilyServiceIfaceMock_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 pgx.Tx
		if args[1] != nil {
			arg1 = args[1].(pgx.Tx)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *FamilyServiceIfaceMock_Delete_Call) Return(err error) *FamilyServiceIfaceMock_Delete_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FamilyServiceIfaceMock_Delete_Call) RunAndReturn(run func(ctx context.Context, fn pgx.Tx, familyID int) error) *FamilyServiceIfaceMock_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetFamiliesByUserID provides a mock function for the type FamilyServiceIfaceMock
func (_mock *FamilyServiceIfaceMock) GetFamiliesByUserID(ctx context.Context, userID int64) ([]entity.Family, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetFamiliesByUserID")
	}

	var r0 []entity.Family
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) ([]entity.Family, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) []entity.Family); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Family)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FamilyServiceIfaceMock_GetFamiliesByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFamiliesByUserID'
type FamilyServiceIfaceMock_GetFamiliesByUserID_Call struct {
	*mock.Call
}

// GetFamiliesByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *FamilyServiceIfaceMock_Expecter) GetFamiliesByUserID(ctx interface{}, userID interface{}) *FamilyServiceIfaceMock_GetFamiliesByUserID_Call {
	return &FamilyServiceIfaceMock_GetFamiliesByUserID_Call{Call: _e.mock.On("GetFamiliesByUserID", ctx, userID)}
}

func (_c *FamilyServiceIfaceMock_GetFamiliesByUserID_Call) Run(run func(ctx context.Context, userID int64)) *FamilyServiceIfaceMock_GetFamiliesByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FamilyServiceIfaceMock_GetFamiliesByUserID_Call) Return(familys []entity.Family, err error) *FamilyServiceIfaceMock_GetFamiliesByUserID_Call {
	_c.Call.Return(familys, err)
	return _c
}

func (_c *FamilyServiceIfaceMock_GetFamiliesByUserID_Call) RunAndReturn(run func(ctx context.Context, userID int64) ([]entity.Family, error)) *FamilyServiceIfaceMock_GetFamiliesByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFamilyByCode provides a mock function for the type FamilyServiceIfaceMock
func (_mock *FamilyServiceIfaceMock) GetFamilyByCode(ctx context.Context, code string) (*entity.Family, time.Time, error) {
	ret := _mock.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetFamilyByCode")
	}

	var r0 *entity.Family
	var r1 time.Time
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*entity.Family, time.Time, error)); ok {
		return returnFunc(ctx, code)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *entity.Family); ok {
		r0 = returnFunc(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Family)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) time.Time); ok {
		r1 = returnFunc(ctx, code)
	} else {
		r1 = ret.Get(1).(time.Time)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, code)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// FamilyServiceIfaceMock_GetFamilyByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFamilyByCode'
type FamilyServiceIfaceMock_GetFamilyByCode_Call struct {
	*mock.Call
}

// GetFamilyByCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *FamilyServiceIfaceMock_Expecter) GetFamilyByCode(ctx interface{}, code interface{}) *FamilyServiceIfaceMock_GetFamilyByCode_Call {
	return &FamilyServiceIfaceMock_GetFamilyByCode_Call{Call: _e.mock.On("GetFamilyByCode", ctx, code)}
}

func (_c *FamilyServiceIfaceMock_GetFamilyByCode_Call) Run(run func(ctx context.Context, code string)) *FamilyServiceIfaceMock_GetFamilyByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FamilyServiceIfaceMock_GetFamilyByCode_Call) Return(family *entity.Family, time1 time.Time, err error) *FamilyServiceIfaceMock_GetFamilyByCode_Call {
	_c.Call.Return(family, time1, err)
	return _c
}

func (_c *FamilyServiceIfaceMock_GetFamilyByCode_Call) RunAndReturn(run func(ctx context.Context, code string) (*entity.Family, time.Time, error)) *FamilyServiceIfaceMock_GetFamilyByCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetFamilyByID provides a mock function for the type FamilyServiceIfaceMock
func (_mock *FamilyServiceIfaceMock) GetFamilyByID(ctx context.Context, id int) (*entity.Family, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFamilyByID")
	}

	var r0 *entity.Family
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*entity.Family, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *entity.Family); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Family)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FamilyServiceIfaceMock_GetFamilyByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFamilyByID'
type FamilyServiceIfaceMock_GetFamilyByID_Call struct {
	*mock.Call
}

// GetFamilyByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *FamilyServiceIfaceMock_Expecter) GetFamilyByID(ctx interface{}, id interface{}) *FamilyServiceIfaceMock_GetFamilyByID_Call {
	return &FamilyServiceIfaceMock_GetFamilyByID_Call{Call: _e.mock.On("GetFamilyByID", ctx, id)}
}

func (_c *FamilyServiceIfaceMock_GetFamilyByID_Call) Run(run func(ctx context.Context, id int)) *FamilyServiceIfaceMock_GetFamilyByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FamilyServiceIfaceMock_GetFamilyByID_Call) Return(family *entity.Family, err error) *FamilyServiceIfaceMock_GetFamilyByID_Call {
	_c.Call.Return(family, err)
	return _c
}

func (_c *FamilyServiceIfaceMock_GetFamilyByID_Call) RunAndReturn(run func(ctx context.Context, id int) (*entity.Family, error)) *FamilyServiceIfaceMock_GetFamilyByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetInviteCode provides a mock function for the type FamilyServiceIfaceMock
func (_mock *FamilyServiceIfaceMock) GetInviteCode(ctx context.Context, familyID int) (string, time.Time, error) {
	ret := _mock.Called(ctx, familyID)

	if len(ret) == 0 {
		panic("no return value specified for GetInviteCode")
	}

	var r0 string
	var r1 time.Time
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (string, time.Time, error)); ok {
		return returnFunc(ctx, familyID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) string); ok {
		r0 = returnFunc(ctx, familyID)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) time.Time); ok {
		r1 = returnFunc(ctx, familyID)
	} else {
		r1 = ret.Get(1).(time.Time)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = returnFunc(ctx, familyID)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// FamilyServiceIfaceMock_GetInviteCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInviteCode'
type FamilyServiceIfaceMock_GetInviteCode_Call struct {
	*mock.Call
}

// GetInviteCode is a helper method to define mock.On call
//   - ctx context.Context
//   - familyID int
func (_e *FamilyServiceIfaceMock_Expecter) GetInviteCode(ctx interface{}, familyID interface{}) *FamilyServiceIfaceMock_GetInviteCode_Call {
	return &FamilyServiceIfaceMock_GetInviteCode_Call{Call: _e.mock.On("GetInviteCode", ctx, familyID)}
}

func (_c *FamilyServiceIfaceMock_GetInviteCode_Call) Run(run func(ctx context.Context, familyID int)) *FamilyServiceIfaceMock_GetInviteCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FamilyServiceIfaceMock_GetInviteCode_Call) Return(s string, time1 time.Time, err error) *FamilyServiceIfaceMock_GetInviteCode_Call {
	_c.Call.Return(s, time1, err)
	return _c
}

func (_c *FamilyServiceIfaceMock_GetInviteCode_Call) RunAndReturn(run func(ctx context.Context, familyID int) (string, time.Time, error)) *FamilyServiceIfaceMock_GetInviteCode_Call {
	_c.Call.Return(run)
	return _c
}

// SaveFamilyInviteCode provides a mock function for the type FamilyServiceIfaceMock
func (_mock *FamilyServiceIfaceMock) SaveFamilyInviteCode(ctx context.Context, userId int64, familyId int, code string) (time.Time, error) {
	ret := _mock.Called(ctx, userId, familyId, code)

	if len(ret) == 0 {
		panic("no return value specified for SaveFamilyInviteCode")
	}

	var r0 time.Time
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int, string) (time.Time, error)); ok {
		return returnFunc(ctx, userId, familyId, code)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int, string) time.Time); ok {
		r0 = returnFunc(ctx, userId, familyId, code)
	} else {
		r0 = ret.Get(0).(time.Time)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64, int, string) error); ok {
		r1 = returnFunc(ctx, userId, familyId, code)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FamilyServiceIfaceMock_SaveFamilyInviteCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveFamilyInviteCode'
type FamilyServiceIfaceMock_SaveFamilyInviteCode_Call struct {
	*mock.Call
}

// SaveFamilyInviteCode is a helper method to define mock.On call
//   - ctx context.Context
//   - userId int64
//   - familyId int
//   - code string
func (_e *FamilyServiceIfaceMock_Expecter) SaveFamilyInviteCode(ctx interface{}, userId interface{}, familyId interface{}, code interface{}) *FamilyServiceIfaceMock_SaveFamilyInviteCode_Call {
	return &FamilyServiceIfaceMock_SaveFamilyInviteCode_Call{Call: _e.mock.On("SaveFamilyInviteCode", ctx, userId, familyId, code)}
}

func (_c *FamilyServiceIfaceMock_SaveFamilyInviteCode_Call) Run(run func(ctx context.Context, userId int64, familyId int, code string)) *FamilyServiceIfaceMock_SaveFamilyInviteCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		var arg2 int
		if args[2] != nil {
			arg2 = args[2].(int)
		}
		var arg3 string
		if args[3] != nil {
			arg3 = args[3].(string)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *FamilyServiceIfaceMock_SaveFamilyInviteCode_Call) Return(time1 time.Time, err error) *FamilyServiceIfaceMock_SaveFamilyInviteCode_Call {
	_c.Call.Return(time1, err)
	return _c
}

func (_c *FamilyServiceIfaceMock_SaveFamilyInviteCode_Call) RunAndReturn(run func(ctx context.Context, userId int64, familyId int, code string) (time.Time, error)) *FamilyServiceIfaceMock_SaveFamilyInviteCode_Call {
	_c.Call.Return(run)
	return _c
}

// WithTransaction provides a mock function for the type FamilyServiceIfaceMock
func (_mock *FamilyServiceIfaceMock) WithTransaction(ctx context.Context, fn func(pgx.Tx) error) error {
	ret := _mock.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(pgx.Tx) error) error); ok {
		r0 = returnFunc(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// FamilyServiceIfaceMock_WithTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTransaction'
type FamilyServiceIfaceMock_WithTransaction_Call struct {
	*mock.Call
}

// WithTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(pgx.Tx) error
func (_e *FamilyServiceIfaceMock_Expecter) WithTransaction(ctx interface{}, fn interface{}) *FamilyServiceIfaceMock_WithTransaction_Call {
	return &FamilyServiceIfaceMock_WithTransaction_Call{Call: _e.mock.On("WithTransaction", ctx, fn)}
}

func (_c *FamilyServiceIfaceMock_WithTransaction_Call) Run(run func(ctx context.Context, fn func(pgx.Tx) error)) *FamilyServiceIfaceMock_WithTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(pgx.Tx) error
		if args[1] != nil {
			arg1 = args[1].(func(pgx.Tx) error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FamilyServiceIfaceMock_WithTransaction_Call) Return(err error) *FamilyServiceIfaceMock_WithTransaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *FamilyServiceIfaceMock_WithTransaction_Call) RunAndReturn(run func(ctx context.Context, fn func(pgx.Tx) error) error) *FamilyServiceIfaceMock_WithTransaction_Call {
	_c.Call.Return(run)
	return _c
}
