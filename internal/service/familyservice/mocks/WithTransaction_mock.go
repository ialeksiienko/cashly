// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"

	"github.com/jackc/pgx/v4"
	mock "github.com/stretchr/testify/mock"
)

// NewWithTransactionMock creates a new instance of WithTransactionMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWithTransactionMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *WithTransactionMock {
	mock := &WithTransactionMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// WithTransactionMock is an autogenerated mock type for the WithTransaction type
type WithTransactionMock struct {
	mock.Mock
}

type WithTransactionMock_Expecter struct {
	mock *mock.Mock
}

func (_m *WithTransactionMock) EXPECT() *WithTransactionMock_Expecter {
	return &WithTransactionMock_Expecter{mock: &_m.Mock}
}

// WithTransaction provides a mock function for the type WithTransactionMock
func (_mock *WithTransactionMock) WithTransaction(ctx context.Context, fn func(pgx.Tx) error) error {
	ret := _mock.Called(ctx, fn)

	if len(ret) == 0 {
		panic("no return value specified for WithTransaction")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, func(pgx.Tx) error) error); ok {
		r0 = returnFunc(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// WithTransactionMock_WithTransaction_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTransaction'
type WithTransactionMock_WithTransaction_Call struct {
	*mock.Call
}

// WithTransaction is a helper method to define mock.On call
//   - ctx context.Context
//   - fn func(pgx.Tx) error
func (_e *WithTransactionMock_Expecter) WithTransaction(ctx interface{}, fn interface{}) *WithTransactionMock_WithTransaction_Call {
	return &WithTransactionMock_WithTransaction_Call{Call: _e.mock.On("WithTransaction", ctx, fn)}
}

func (_c *WithTransactionMock_WithTransaction_Call) Run(run func(ctx context.Context, fn func(pgx.Tx) error)) *WithTransactionMock_WithTransaction_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 func(pgx.Tx) error
		if args[1] != nil {
			arg1 = args[1].(func(pgx.Tx) error)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *WithTransactionMock_WithTransaction_Call) Return(err error) *WithTransactionMock_WithTransaction_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *WithTransactionMock_WithTransaction_Call) RunAndReturn(run func(ctx context.Context, fn func(pgx.Tx) error) error) *WithTransactionMock_WithTransaction_Call {
	_c.Call.Return(run)
	return _c
}
