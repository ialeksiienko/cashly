// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"cashly/internal/entity"
	"context"

	mock "github.com/stretchr/testify/mock"
)

// NewFamilyCreatorMock creates a new instance of FamilyCreatorMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFamilyCreatorMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FamilyCreatorMock {
	mock := &FamilyCreatorMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FamilyCreatorMock is an autogenerated mock type for the FamilyCreator type
type FamilyCreatorMock struct {
	mock.Mock
}

type FamilyCreatorMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FamilyCreatorMock) EXPECT() *FamilyCreatorMock_Expecter {
	return &FamilyCreatorMock_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type FamilyCreatorMock
func (_mock *FamilyCreatorMock) Create(ctx context.Context, inp *entity.Family) (*entity.Family, error) {
	ret := _mock.Called(ctx, inp)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.Family
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Family) (*entity.Family, error)); ok {
		return returnFunc(ctx, inp)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entity.Family) *entity.Family); ok {
		r0 = returnFunc(ctx, inp)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Family)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entity.Family) error); ok {
		r1 = returnFunc(ctx, inp)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FamilyCreatorMock_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type FamilyCreatorMock_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - inp *entity.Family
func (_e *FamilyCreatorMock_Expecter) Create(ctx interface{}, inp interface{}) *FamilyCreatorMock_Create_Call {
	return &FamilyCreatorMock_Create_Call{Call: _e.mock.On("Create", ctx, inp)}
}

func (_c *FamilyCreatorMock_Create_Call) Run(run func(ctx context.Context, inp *entity.Family)) *FamilyCreatorMock_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *entity.Family
		if args[1] != nil {
			arg1 = args[1].(*entity.Family)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FamilyCreatorMock_Create_Call) Return(family *entity.Family, err error) *FamilyCreatorMock_Create_Call {
	_c.Call.Return(family, err)
	return _c
}

func (_c *FamilyCreatorMock_Create_Call) RunAndReturn(run func(ctx context.Context, inp *entity.Family) (*entity.Family, error)) *FamilyCreatorMock_Create_Call {
	_c.Call.Return(run)
	return _c
}
