// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"cashly/internal/entity"
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewFamilyProviderMock creates a new instance of FamilyProviderMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFamilyProviderMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *FamilyProviderMock {
	mock := &FamilyProviderMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// FamilyProviderMock is an autogenerated mock type for the FamilyProvider type
type FamilyProviderMock struct {
	mock.Mock
}

type FamilyProviderMock_Expecter struct {
	mock *mock.Mock
}

func (_m *FamilyProviderMock) EXPECT() *FamilyProviderMock_Expecter {
	return &FamilyProviderMock_Expecter{mock: &_m.Mock}
}

// GetFamiliesByUserID provides a mock function for the type FamilyProviderMock
func (_mock *FamilyProviderMock) GetFamiliesByUserID(ctx context.Context, userID int64) ([]entity.Family, error) {
	ret := _mock.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetFamiliesByUserID")
	}

	var r0 []entity.Family
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) ([]entity.Family, error)); ok {
		return returnFunc(ctx, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) []entity.Family); ok {
		r0 = returnFunc(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Family)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FamilyProviderMock_GetFamiliesByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFamiliesByUserID'
type FamilyProviderMock_GetFamiliesByUserID_Call struct {
	*mock.Call
}

// GetFamiliesByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID int64
func (_e *FamilyProviderMock_Expecter) GetFamiliesByUserID(ctx interface{}, userID interface{}) *FamilyProviderMock_GetFamiliesByUserID_Call {
	return &FamilyProviderMock_GetFamiliesByUserID_Call{Call: _e.mock.On("GetFamiliesByUserID", ctx, userID)}
}

func (_c *FamilyProviderMock_GetFamiliesByUserID_Call) Run(run func(ctx context.Context, userID int64)) *FamilyProviderMock_GetFamiliesByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int64
		if args[1] != nil {
			arg1 = args[1].(int64)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FamilyProviderMock_GetFamiliesByUserID_Call) Return(familys []entity.Family, err error) *FamilyProviderMock_GetFamiliesByUserID_Call {
	_c.Call.Return(familys, err)
	return _c
}

func (_c *FamilyProviderMock_GetFamiliesByUserID_Call) RunAndReturn(run func(ctx context.Context, userID int64) ([]entity.Family, error)) *FamilyProviderMock_GetFamiliesByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetFamilyByCode provides a mock function for the type FamilyProviderMock
func (_mock *FamilyProviderMock) GetFamilyByCode(ctx context.Context, code string) (*entity.Family, time.Time, error) {
	ret := _mock.Called(ctx, code)

	if len(ret) == 0 {
		panic("no return value specified for GetFamilyByCode")
	}

	var r0 *entity.Family
	var r1 time.Time
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*entity.Family, time.Time, error)); ok {
		return returnFunc(ctx, code)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *entity.Family); ok {
		r0 = returnFunc(ctx, code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Family)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) time.Time); ok {
		r1 = returnFunc(ctx, code)
	} else {
		r1 = ret.Get(1).(time.Time)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, code)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// FamilyProviderMock_GetFamilyByCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFamilyByCode'
type FamilyProviderMock_GetFamilyByCode_Call struct {
	*mock.Call
}

// GetFamilyByCode is a helper method to define mock.On call
//   - ctx context.Context
//   - code string
func (_e *FamilyProviderMock_Expecter) GetFamilyByCode(ctx interface{}, code interface{}) *FamilyProviderMock_GetFamilyByCode_Call {
	return &FamilyProviderMock_GetFamilyByCode_Call{Call: _e.mock.On("GetFamilyByCode", ctx, code)}
}

func (_c *FamilyProviderMock_GetFamilyByCode_Call) Run(run func(ctx context.Context, code string)) *FamilyProviderMock_GetFamilyByCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FamilyProviderMock_GetFamilyByCode_Call) Return(family *entity.Family, time1 time.Time, err error) *FamilyProviderMock_GetFamilyByCode_Call {
	_c.Call.Return(family, time1, err)
	return _c
}

func (_c *FamilyProviderMock_GetFamilyByCode_Call) RunAndReturn(run func(ctx context.Context, code string) (*entity.Family, time.Time, error)) *FamilyProviderMock_GetFamilyByCode_Call {
	_c.Call.Return(run)
	return _c
}

// GetFamilyByID provides a mock function for the type FamilyProviderMock
func (_mock *FamilyProviderMock) GetFamilyByID(ctx context.Context, id int) (*entity.Family, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetFamilyByID")
	}

	var r0 *entity.Family
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) (*entity.Family, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int) *entity.Family); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Family)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// FamilyProviderMock_GetFamilyByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFamilyByID'
type FamilyProviderMock_GetFamilyByID_Call struct {
	*mock.Call
}

// GetFamilyByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id int
func (_e *FamilyProviderMock_Expecter) GetFamilyByID(ctx interface{}, id interface{}) *FamilyProviderMock_GetFamilyByID_Call {
	return &FamilyProviderMock_GetFamilyByID_Call{Call: _e.mock.On("GetFamilyByID", ctx, id)}
}

func (_c *FamilyProviderMock_GetFamilyByID_Call) Run(run func(ctx context.Context, id int)) *FamilyProviderMock_GetFamilyByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 int
		if args[1] != nil {
			arg1 = args[1].(int)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *FamilyProviderMock_GetFamilyByID_Call) Return(family *entity.Family, err error) *FamilyProviderMock_GetFamilyByID_Call {
	_c.Call.Return(family, err)
	return _c
}

func (_c *FamilyProviderMock_GetFamilyByID_Call) RunAndReturn(run func(ctx context.Context, id int) (*entity.Family, error)) *FamilyProviderMock_GetFamilyByID_Call {
	_c.Call.Return(run)
	return _c
}
