package routes

import (
	"errors"
	"fmt"
	"github.com/jackc/pgx/v4"
	tb "gopkg.in/telebot.v3"
	"log/slog"
	"main-service/internal/models"
	"main-service/internal/repository"
	"math/rand"
	"strings"
	"time"
	"unicode/utf8"
)

var (
	InternalServerErrorForUser = fmt.Errorf("–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –Ω–∞ –±–æ—Ü—ñ —Å–µ—Ä–≤–µ—Ä—É, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")
)

var (
	btnCreateFamily = tb.InlineButton{
		Unique: "create_family_button",
		Text:   "–°—Ç–≤–æ—Ä–∏—Ç–∏ —Å—ñ–º'—é",
	}
	btnJoinFamily = tb.InlineButton{
		Unique: "join_family_button",
		Text:   "–ü—Ä–∏—î–¥–Ω–∞—Ç–∏—Å—è",
	}
	btnRemoveFamily = tb.InlineButton{
		Unique: "remove_family_button",
		Text:   "–í–∏–¥–∞–ª–∏—Ç–∏ —Å—ñ–º'—é",
	}
	btnLeaveFamily = tb.InlineButton{
		Unique: "leave_family_button",
		Text:   "–í–∏–π—Ç–∏ –∑ —Å—ñ–º'—ó",
	}
	btnCreateNewCode = tb.InlineButton{
		Unique: "create_new_code_button",
		Text:   "–°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è",
	}
)

func SetupRoutes(bot *tb.Bot, db *repository.Database, sl *slog.Logger) {

	bot.Handle("/start", func(c tb.Context) error {
		userID := c.Sender().ID

		_, err := db.SaveUser(&models.User{
			Username:  c.Sender().Username,
			Firstname: c.Sender().FirstName,
		})
		if err != nil {
			sl.Error("failed to save user", slog.Int("userID", int(c.Sender().ID)), slog.String("err", err.Error()))
			return c.Send(InternalServerErrorForUser.Error())
		}

		families, err := db.GetFamiliesByUserID(userID)
		if err != nil {
			sl.Error("failed to get family by userID", slog.Int("userID", int(c.Sender().ID)), slog.String("err", err.Error()))
			return c.Send(InternalServerErrorForUser.Error())
		}

		inlineKeys := [][]tb.InlineButton{
			{btnCreateFamily}, {btnJoinFamily},
		}

		if len(families) == 0 {
			return c.Send("–ü—Ä–∏–≤—ñ—Ç! –£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ—ó —Å—ñ–º'—ó. –°—Ç–≤–æ—Ä–∏ –∞–±–æ –ø—Ä–∏—î–¥–Ω–∞–π—Å—è.", &tb.ReplyMarkup{
				InlineKeyboard: inlineKeys,
			})
		}

		var familyList string
		for i, f := range families {
			familyList += fmt.Sprintf("%d. %s\n", i+1, f.Name)
		}

		msg := fmt.Sprintf("–ü—Ä–∏–≤—ñ—Ç! –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞ –∫–∞—Ä—Ç—ñ Monobank.\n\n"+
			"–¢–≤–æ—ó —Å—ñ–º'—ó (%d):\n%s", len(families), familyList)

		bot.Send(c.Sender(), msg, &tb.ReplyMarkup{
			InlineKeyboard: inlineKeys,
		})

		return nil
	})

	bot.Handle(&btnCreateFamily, func(c tb.Context) error {
		userID := c.Sender().ID

		bot.Send(c.Sender(), "–í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –Ω–æ–≤–æ—ó —Å—ñ–º'—ó:")

		bot.Handle(tb.OnText, func(c tb.Context) error {
			familyName := c.Text()

			if utf8.RuneCountInString(familyName) > 20 {
				return c.Send("–ù–∞–∑–≤–∞ —Å—ñ–º'—ó –Ω–µ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –±—ñ–ª—å—à–µ 20 —Å–∏–º–≤–æ–ª—ñ–≤.")
			}

			f, err := db.CreateFamily(&models.Family{
				Name:      familyName,
				CreatedBy: userID,
			})
			if err != nil {
				sl.Error("failed to create family", slog.Int("familyID", int(userID)), slog.String("err", err.Error()))
				return c.Send(InternalServerErrorForUser.Error())
			}

			sl.Debug("family created", slog.Int("familyID", int(userID)))

			saveErr := db.SaveUserToFamily(f)
			if saveErr != nil {
				sl.Error("unable to save user to family", slog.Int("userID", int(c.Sender().ID)), slog.String("err", err.Error()))
				return c.Send(InternalServerErrorForUser.Error())
			}

			code := generateInviteCode()

			expiresAt, err := db.SaveFamilyInviteCode(userID, f.ID, code)
			if err != nil {
				sl.Error("failed to save family invite code", slog.Int("familyID", int(c.Sender().ID)), slog.String("err", err.Error()))
				return c.Send(InternalServerErrorForUser.Error())
			}

			return c.Send(fmt.Sprintf("–°—ñ–º'—è —Å—Ç–≤–æ—Ä–µ–Ω–∞. –ö–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è:\n\n`%s`\n\n–î—ñ–π—Å–Ω–∏–π –¥–æ ‚Äî %s", code, expiresAt.Format("02.01.2006 15:04")), &tb.SendOptions{
				ParseMode: tb.ModeMarkdown,
			})
		})
		return nil
	})

	bot.Handle(&btnJoinFamily, func(c tb.Context) error {
		bot.Send(c.Sender(), "–í–≤–µ–¥–∏ –∫–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è.")

		bot.Handle(tb.OnText, func(c tb.Context) error {
			code := strings.ToUpper(c.Text())

			if len(code) != 6 {
				return c.Send("–ö–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ 6 —Å–∏–º–≤–æ–ª—ñ–≤.")
			}

			f, expiresAt, err := db.GetFamilyByCode(code)
			if err != nil {
				sl.Error("failed to get family by code", slog.String("err", err.Error()))
				if errors.Is(err, pgx.ErrNoRows) {
					sl.Error("family not found with code", slog.String("code", code))
					return c.Send("–°—ñ–º'—é –∑ —Ü–∏–º –∫–æ–¥–æ–º –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
				}
				return c.Send(InternalServerErrorForUser.Error())
			}

			if time.Now().After(expiresAt) {
				sl.Error("expired family by code", slog.String("err", err.Error()))
				return c.Send(fmt.Sprintf("–ö–æ–¥ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–µ –¥—ñ–π—Å–Ω–∏–π, –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è - %s", expiresAt.Format("02.01.2006 –æ 15:04")))
			}

			saveErr := db.SaveUserToFamily(f)
			if saveErr != nil {
				sl.Error("unable to save user to family", slog.Int("userID", int(c.Sender().ID)), slog.String("err", err.Error()))
				return c.Send(InternalServerErrorForUser.Error())
			}

			return c.Send(fmt.Sprintf("–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ —Å—ñ–º'—ó! –ù–∞–∑–≤–∞ - %s", f.Name))
		})
		return nil
	})

	bot.Handle("/family", func(c tb.Context) error {
		userID := c.Sender().ID

		families, err := db.GetFamiliesByUserID(userID)
		if err != nil {
			sl.Error("failed to get family", slog.Int("userID", int(userID)), slog.String("err", err.Error()))
			return c.Send("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ —Å—ñ–º'—é.")
		}

		if len(families) == 0 {
			return c.Send("–¢–∏ —â–µ –Ω–µ –ø—Ä–∏—î–¥–Ω–∞–Ω–∏–π –¥–æ –∂–æ–¥–Ω–æ—ó —Å—ñ–º‚Äô—ó.")
		}

		msg := "–¢–≤–æ—ó —Å—ñ–º‚Äô—ó:\n"
		for _, f := range families {
			users, err := db.GetAllUsersInFamily(&f)
			if err != nil {
				sl.Error("failed to get users", slog.Int("userID", int(userID)), slog.String("err", err.Error()))
				return c.Send("–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —Å—ñ–º'—ó. –°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ.")
			}

			usersList := make([]string, len(users))
			for _, u := range users {
				usersList = append(usersList, u.Username)
			}

			msg += fmt.Sprintf("üî∏ %s (ID: %d). \n–£—á–∞—Å–Ω–∏–∫–∏: %s\n", f.Name, f.ID, strings.Join(usersList, ", "))
		}

		return c.Send(msg)
	})

	//button := tb.InlineButton{
	//			Unique: "mono_link",
	//			Text:   "–°–∏–ª–∫–∞",
	//			URL:    "https://api.monobank.ua/",
	//		}
	//
	//		inlineKeys := [][]tb.InlineButton{
	//			{button},
	//		}
	//
	//		bot.Send(c.Sender(), "–ü—Ä–∏–≤—ñ—Ç, —Ü–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Ä–∞—Ö—É–Ω–æ–∫ –Ω–∞ –∫–∞—Ä—Ç—ñ monobank.\n\n–ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å–∏–ª—Ü—ñ –≤–Ω–∏–∑—É —Ç–∞ –≤—ñ–¥–ø—Ä–∞–≤ —Å–≤—ñ–π —Ç–æ–∫–µ–Ω –≤ —Ü–µ–π —á–∞—Ç.", &tb.ReplyMarkup{
	//			InlineKeyboard: inlineKeys,
	//		})
	//
	//		bot.Handle(tb.OnText, func(c tb.Context) error {
	//			return c.Send("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
	//		}, middlewares.CheckTokenValid)
	//		return nil

	//h.bot.Handle("/balance", func(c tb.Context) error {
	//	buttonBlack := tb.InlineButton{Unique: "black", Text: "–ß–µ—Ä–Ω–∞—è"}
	//	buttonWhite := tb.InlineButton{Unique: "white", Text: "–ë–µ–ª–∞—è"}
	//
	//	inlineKeysCardType := [][]tb.InlineButton{
	//		{buttonBlack},
	//		{buttonWhite},
	//	}
	//
	//	h.bot.Send(c.Sender(), "–ù–∞–ø–∏—à–∏ –∫–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å.", &tb.ReplyMarkup{InlineKeyboard: inlineKeysCardType})
	//
	//	h.bot.Handle(&buttonBlack, func(c tb.Context) error {
	//		buttonHryvnia := tb.InlineButton{Unique: "hryvnia", Text: "–ì—Ä–∏–≤–Ω—ã"}
	//		buttonZloty := tb.InlineButton{Unique: "zloty", Text: "–ó–ª–æ—Ç—ã–µ"}
	//		buttonDollars := tb.InlineButton{Unique: "dollars", Text: "–î–æ–ª–ª–∞—Ä—ã"}
	//
	//		inlineKeysCurrency := [][]tb.InlineButton{
	//			{buttonHryvnia},
	//			{buttonZloty},
	//			{buttonDollars},
	//		}
	//
	//		h.bot.Send(c.Sender(), "–¢–µ–ø–µ—Ä—å –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –∫–∞–∫–æ–π –≤–∞–ª—é—Ç–µ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –±–∞–ª–∞–Ω—Å.", &tb.ReplyMarkup{InlineKeyboard: inlineKeysCurrency})
	//
	//		h.bot.Handle(&buttonZloty, func(c tb.Context) error {
	//			rabbitDataSelect := &messaging.RabbitMQ{
	//				Operation: "select",
	//				User: &models.User{
	//					ID: c.Sender().ID,
	//				},
	//			}
	//
	//			userFromBank, err := h.rabbitMQConn.SetupAndConsume(messaging.BankService, rabbitDataSelect)
	//			if err != nil || userFromBank == nil {
	//				h.log.Error("failed to get user from db", slog.String("error", err.Error()))
	//				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
	//			}
	//
	//			rabbitDataUser := &messaging.RabbitMQ{
	//				Operation: "user",
	//				User: &models.User{
	//					Token:    userFromBank.Token,
	//					CardType: buttonBlack.Unique,
	//					Currency: buttonZloty.Unique,
	//				},
	//			}
	//
	//			userFromApi, err := h.rabbitMQConn.SetupAndConsume(messaging.ApiService, rabbitDataUser)
	//			if err != nil || userFromApi == nil {
	//				h.log.Error("failed to get user data from api service", slog.String("error", err.Error()))
	//				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
	//			}
	//
	//			return c.Send("–ë–∞–ª–∞–Ω—Å: " + userFromApi.Balance + " –¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏: " + userFromApi.CardType + " –í–∞–ª—é—Ç–∞: " + userFromApi.Currency)
	//		})
	//		h.bot.Handle(&buttonDollars, func(c tb.Context) error {
	//			rabbitDataSelect := &messaging.RabbitMQ{
	//				Operation: "select",
	//				User: &models.User{
	//					ID: c.Sender().ID,
	//				},
	//			}
	//
	//			userFromBank, err := h.rabbitMQConn.SetupAndConsume(messaging.BankService, rabbitDataSelect)
	//			if err != nil || userFromBank == nil {
	//				h.log.Error("failed to get user from db", slog.String("error", err.Error()))
	//				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
	//			}
	//
	//			rabbitDataUser := &messaging.RabbitMQ{
	//				Operation: "user",
	//				User: &models.User{
	//					Token:    userFromBank.Token,
	//					CardType: buttonBlack.Unique,
	//					Currency: buttonDollars.Unique,
	//				},
	//			}
	//
	//			userFromApi, err := h.rabbitMQConn.SetupAndConsume(messaging.ApiService, rabbitDataUser)
	//			if err != nil || userFromApi == nil {
	//				h.log.Error("failed to get user data from api service", slog.String("error", err.Error()))
	//				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
	//			}
	//
	//			return c.Send("–ë–∞–ª–∞–Ω—Å: " + userFromApi.Balance + " –¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏: " + userFromApi.CardType + " –í–∞–ª—é—Ç–∞: " + userFromApi.Currency)
	//		})
	//		h.bot.Handle(&buttonHryvnia, func(c tb.Context) error {
	//			rabbitDataSelect := &messaging.RabbitMQ{
	//				Operation: "select",
	//				User: &models.User{
	//					ID: c.Sender().ID,
	//				},
	//			}
	//
	//			userFromBank, err := h.rabbitMQConn.SetupAndConsume(messaging.BankService, rabbitDataSelect)
	//			if err != nil || userFromBank == nil {
	//				h.log.Error("failed to get user from db", slog.String("error", err.Error()))
	//				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
	//			}
	//
	//			rabbitDataUser := &messaging.RabbitMQ{
	//				Operation: "user",
	//				User: &models.User{
	//					Token:    userFromBank.Token,
	//					CardType: buttonBlack.Unique,
	//					Currency: buttonHryvnia.Unique,
	//				},
	//			}
	//
	//			userFromApi, err := h.rabbitMQConn.SetupAndConsume(messaging.ApiService, rabbitDataUser)
	//			if err != nil || userFromApi == nil {
	//				h.log.Error("failed to get user data from api service", slog.String("error", err.Error()))
	//				return c.Send("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
	//			}
	//
	//			return c.Send("–ë–∞–ª–∞–Ω—Å: " + userFromApi.Balance + " –¢–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏: " + userFromApi.CardType + " –í–∞–ª—é—Ç–∞: " + userFromApi.Currency)
	//		})
	//		return nil
	//	})
	//	return nil
	//})
}

const codeLength = 6

var generateInviteCode = func() string {
	const letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

	b := make([]byte, codeLength)
	for i := range b {
		b[i] = letters[rand.Intn(len(letters))]
	}
	return string(b)
}
